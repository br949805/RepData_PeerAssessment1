load("C:/Users/broberson/Desktop/cdc.Rdata")
head(cdc)
tail(cdc)
head(cdc[height])
head(cdc$height)
head(cdc$height,cdc$genhealth)
head(cdc$height:cdc$genhealth)
head(cdc$height cdc$genhealth)
head(cdc$height, cdc$genhealth)
head(cdc$height, cdc$genhlth)
sum(1,2)
product(1,2)
multi(1,7)
1*23
table(cdc$genhlth)
table(cdc$genhlth)/20000
gender_smokers -> table(cdc$gender,cdc$smoke100)/20000
gender_smokers = table(cdc$gender,cdc$smoke100)/20000
mosaicplot(gender_smokers)
View(cdc)
View(cdc)
subset(cdc,cdc$age<23 & cdc$smoke100 == 1)
under23_and_smoke = subset(cdc,cdc$age<23 & cdc$smoke100 == 1)
install.packages("data.table")
library("data.table", lib.loc="C:/Users/broberson/Documents/R/win-library/3.0")
install.packages("Rcpp")
library("data.table", lib.loc="C:/Users/broberson/Documents/R/win-library/3.0")
`getdata%2Fdata%2Fss06hid` <- read.csv("C:\\Users\\BROBER~1\\AppData\\Local\\Temp\\RtmpSMREWR\\data1b7c415267d9")
View(`getdata%2Fdata%2Fss06hid`)
data <- getdata%Fdata%2Fss06hid
data <- `getdata%2Fdata%2Fss06hid`
rm <- `getdata%2Fdata%2Fss06hid`
rm(rm)
rm(`getdata%2Fdata%2Fss06hid`)
q1 <- data[,1]
q1 <- data[,"Type"=1]
q1 <- data[,"Type"==1]
View(`q1`)
View(`q1`)
q1 <- data["Type"==1]
q1 <- data["Type"] == 1
q1 <- data[TYPE] == 1
q1 <- data["TYPE"] == 1
q1 <- data[1:5, "TYPE"]
q1 <- data[, "TYPE"]
q1 <- data[, "TYPE" < 2]
q1 <- data[[c("TYPE", "VAL")]]
q1 <- data[[c("TYPE", "VAL"), exact = F]]
q1 <- data[[c("TYPE", "VAL")]]
q1 <- subset(data, Type ==1)
q1 <- subset(data, TYPE ==1)
q1 <- subset(data, TYPE ==1 & VAL > 1000000)
== 24
q1 <- subset(data, TYPE ==1 & VAL == 24)
q1
install.packages("xlsx")
library("xlsx", lib.loc="C:/Users/broberson/Documents/R/win-library/3.0")
file <- system.file("C:\Users\broberson\Downloads\getdata-data-DATA.gov_NGAP.xlsx")
file <- system.file('C:\Users\broberson\Downloads\getdata-data-DATA.gov_NGAP.xlsx')
file <- system.file(C:\Users\broberson\Downloads\getdata-data-DATA.gov_NGAP.xlsx)
file <- system.file("C:/Users/broberson/Downloads/getdata-data-DATA.gov_NGAP.xlsx"")
file <- system.file("C:/Users/broberson/Downloads/getdata-data-DATA.gov_NGAP.xlsx")
file <- system.file("C:/Users/broberson/Downloads/getdata-data-DATA.gov_NGAP.xlsx")
file
read.xlsx2(file)
read.xlsx2(file, sheetName=NULL)
read.xlsx2(file, sheetIndex)
read.xlsx2(file, sheetIndex=1)
read.xlsx2(file, 1)
read.xlsx2("C:/Users/broberson/Downloads/getdata-data-DATA.gov_NGAP.xlsx", 1)
data <- read.xlsx2("C:/Users/broberson/Downloads/getdata-data-DATA.gov_NGAP.xlsx", 1, startRow = 18)
data
View(data)
View(data)
install.packages("KernSmooth")
library("KernSmooth", lib.loc="C:/Users/broberson/Documents/R/win-library/3.0")
swirl()
library("swirl", lib.loc="C:/Users/broberson/Documents/R/win-library/3.0")
swirl()
range(cars$price)
61.9-7.4
var(cars$price)
sd(cars$price)
20
10000
10
25
4
summary(cars$price)
3
swirl()
install_from_swirl("Regression_Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4)~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col = 'red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
for (n in 1:6) lhs[n] < - sqe(ols.slope+sltweak[n], ols.ic+ictweak[n])
for (n in 1:6) lhs[n] <- sqe(ols.slope+sltweak[n],ols.ic+ictweak[n])
for (n in 1:6) rhs[n] <- sqe(ols.slope,ols.ic) +
| sum(est(sltweak[n],ictweak[n])^2)
for (n in 1:6) rhs[n] <- sqe(ols.slope,ols.ic) + sum(est(sltweak[n],ictweak[n])^2)
(for (n in 1:6) lhs[n] <- sqe(ols.slope+sltweak[n],ols.ic+ictweak[n])) - for (n in 1:6) rhs[n] <- sqe(ols.slope,ols.ic) + sum(est(sltweak[n],ictweak[n])^2)
lhs-rhs
var(galton$child)
varChild <- var(galton$child)
verRes <- var(fit$residuals)
varRes <- var(fit$residuals)
varEst <- est(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
varPutative <- varRes + varEst
varPutative - varChild
varChild - varPutative
mu <- mean(galton$child)
s
sTot <- 23q4ra
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- sqe(ols.slope, ols.ic)
sRes/sTot
1 - sRes/sTot
efit <- lm(accel ~ mag+dist, attenu)
mean(sres)
mean(varRes)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, family=binomial, ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0,95,1)
qchisq(0.95,1)
var(rpois(1000, 50))
head(hits)
x <- list(a=1:5, b = rnorm(10))
lapply(x,mean)
x <- 1:4
lapply(x,runif,min=0,max=10)
lapply(x,runif,min=0,max=100)
# open plot
plot(border_cir$x, border_cir$y, type="n", asp=1, axes=FALSE,
xlim=c(-1.05,1.05), ylim=c(-1.05,1.05),
xlab="", ylab="")
# yellow slice
polygon(c(Syel$x, 0), c(Syel$y, 0),
border = "#FF9900", col = "#FF9900", lty = NULL)
# red slice
polygon(c(Sred$x, 0), c(Sred$y, 0),
border = "#DC3912", col = "#DC3912", lty = NULL)
# white slice
polygon(c(Swhi$x, 0), c(Swhi$y, 0),
border = "white", col = "white", lty = NULL)
# add gray border
lines(external_cir$x, external_cir$y, col="gray85", lwd=20)
# add external border
lines(border_cir$x, border_cir$y, col="gray20", lwd=2)
# add minor ticks
arrows(x0=tix1_out$x, y0=tix1_out$y, x1=tix1_in$x, y1=tix1_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix2_out$x, y0=tix2_out$y, x1=tix2_in$x, y1=tix2_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix3_out$x, y0=tix3_out$y, x1=tix3_in$x, y1=tix3_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix4_out$x, y0=tix4_out$y, x1=tix4_in$x, y1=tix4_in$y,
length=0, lwd=2.5, col="gray55")
# add major ticks
arrows(x0=major_ticks_out$x, y0=major_ticks_out$y,
x1=major_ticks_in$x, y1=major_ticks_in$y, length=0, lwd=4)
# add value
text(0, -0.65, value, cex=4)
# add label of variable
text(0, 0.43, label, cex=3.8)
# add needle
arrows(0, 0, val_x, val_y, col="#f38171", lwd=7)
# add central blue point
points(0, 0, col="#2e9ef3", pch=19, cex=5)
# add values 0 and 100
text(z0x, z0y, labels="0", col="gray50")
text(z100x, z100y, labels="100", col="gray50")
# function to create a circle
circle <- function(center=c(0,0), radius=1, npoints=100)
{
r = radius
tt = seq(0, 2*pi, length=npoints)
xx = center[1] + r * cos(tt)
yy = center[1] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
# function to get slices
slice2xy <- function(t, rad)
{
t2p = -1 * t * pi + 10*pi/8
list(x = rad * cos(t2p), y = rad * sin(t2p))
}
# function to get major and minor tick marks
ticks <- function(center=c(0,0), from=0, to=2*pi, radius=0.9, npoints=5)
{
r = radius
tt = seq(from, to, length=npoints)
xx = center[1] + r * cos(tt)
yy = center[1] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
# open plot
plot(border_cir$x, border_cir$y, type="n", asp=1, axes=FALSE,
xlim=c(-1.05,1.05), ylim=c(-1.05,1.05),
xlab="", ylab="")
# yellow slice
polygon(c(Syel$x, 0), c(Syel$y, 0),
border = "#FF9900", col = "#FF9900", lty = NULL)
# red slice
polygon(c(Sred$x, 0), c(Sred$y, 0),
border = "#DC3912", col = "#DC3912", lty = NULL)
# white slice
polygon(c(Swhi$x, 0), c(Swhi$y, 0),
border = "white", col = "white", lty = NULL)
# add gray border
lines(external_cir$x, external_cir$y, col="gray85", lwd=20)
# add external border
lines(border_cir$x, border_cir$y, col="gray20", lwd=2)
# add minor ticks
arrows(x0=tix1_out$x, y0=tix1_out$y, x1=tix1_in$x, y1=tix1_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix2_out$x, y0=tix2_out$y, x1=tix2_in$x, y1=tix2_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix3_out$x, y0=tix3_out$y, x1=tix3_in$x, y1=tix3_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix4_out$x, y0=tix4_out$y, x1=tix4_in$x, y1=tix4_in$y,
length=0, lwd=2.5, col="gray55")
# add major ticks
arrows(x0=major_ticks_out$x, y0=major_ticks_out$y,
x1=major_ticks_in$x, y1=major_ticks_in$y, length=0, lwd=4)
# add value
text(0, -0.65, value, cex=4)
# add label of variable
text(0, 0.43, label, cex=3.8)
# add needle
arrows(0, 0, val_x, val_y, col="#f38171", lwd=7)
# add central blue point
points(0, 0, col="#2e9ef3", pch=19, cex=5)
# add values 0 and 100
text(z0x, z0y, labels="0", col="gray50")
text(z100x, z100y, labels="100", col="gray50")
# external circle (this will be used for the black border)
border_cir = circle(c(0,0), radius=1, npoints = 100)
# gray border circle
external_cir = circle(c(0,0), radius=0.97, npoints = 100)
# yellow slice (this will be used for the yellow band)
yellowFrom = 75
yellowTo = 90
yel_ini = (yellowFrom/100) * (12/8)
yel_fin = (yellowTo/100) * (12/8)
Syel = slice2xy(seq.int(yel_ini, yel_fin, length.out = 30), rad=0.9)
# red slice (this will be used for the red band)
redFrom = 90
redTo = 100
red_ini = (redFrom/100) * (12/8)
red_fin = (redTo/100) * (12/8)
Sred = slice2xy(seq.int(red_ini, red_fin, length.out = 30), rad=0.9)
# white slice (this will be used to get the yellow and red bands)
whiteFrom = 74
whiteTo = 101
white_ini = (whiteFrom/100) * (12/8)
white_fin = (whiteTo/100) * (12/8)
Swhi = slice2xy(seq.int(white_ini, white_fin, length.out = 30), rad=0.8)
# coordinates of major ticks (will be plotted as arrows)
major_ticks_out = ticks(c(0,0), from=5*pi/4, to=-pi/4, radius=0.9, 5)
major_ticks_in = ticks(c(0,0), from=5*pi/4, to=-pi/4, radius=0.75, 5)
# coordinates of minor ticks (will be plotted as arrows)
tix1_out = ticks(c(0,0), from=5*pi/4, to=5*pi/4-3*pi/8, radius=0.9, 6)
tix2_out = ticks(c(0,0), from=7*pi/8, to=7*pi/8-3*pi/8, radius=0.9, 6)
tix3_out = ticks(c(0,0), from=4*pi/8, to=4*pi/8-3*pi/8, radius=0.9, 6)
tix4_out = ticks(c(0,0), from=pi/8, to=pi/8-3*pi/8, radius=0.9, 6)
tix1_in = ticks(c(0,0), from=5*pi/4, to=5*pi/4-3*pi/8, radius=0.85, 6)
tix2_in = ticks(c(0,0), from=7*pi/8, to=7*pi/8-3*pi/8, radius=0.85, 6)
tix3_in = ticks(c(0,0), from=4*pi/8, to=4*pi/8-3*pi/8, radius=0.85, 6)
tix4_in = ticks(c(0,0), from=pi/8, to=pi/8-3*pi/8, radius=0.85, 6)
# coordinates of min and max values (0, 100)
v0 = -1 * 0 * pi + 10*pi/8
z0x = 0.65 * cos(v0)
z0y = 0.65 * sin(v0)
v100 = -1 * 12/8 * pi + 10*pi/8
z100x = 0.65 * cos(v100)
z100y = 0.65 * sin(v100)
# indicated value, say 80 (you can choose another number between 0-100)
value = 80
# angle of needle pointing to the specified value
val = (value/100) * (12/8)
v = -1 * val * pi + 10*pi/8
# x-y coordinates of needle
val_x = 0.7 * cos(v)
val_y = 0.7 * sin(v)
# label to be displayed
label = "UseR!"
# open plot
plot(border_cir$x, border_cir$y, type="n", asp=1, axes=FALSE,
xlim=c(-1.05,1.05), ylim=c(-1.05,1.05),
xlab="", ylab="")
# yellow slice
polygon(c(Syel$x, 0), c(Syel$y, 0),
border = "#FF9900", col = "#FF9900", lty = NULL)
# red slice
polygon(c(Sred$x, 0), c(Sred$y, 0),
border = "#DC3912", col = "#DC3912", lty = NULL)
# white slice
polygon(c(Swhi$x, 0), c(Swhi$y, 0),
border = "white", col = "white", lty = NULL)
# add gray border
lines(external_cir$x, external_cir$y, col="gray85", lwd=20)
# add external border
lines(border_cir$x, border_cir$y, col="gray20", lwd=2)
# add minor ticks
arrows(x0=tix1_out$x, y0=tix1_out$y, x1=tix1_in$x, y1=tix1_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix2_out$x, y0=tix2_out$y, x1=tix2_in$x, y1=tix2_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix3_out$x, y0=tix3_out$y, x1=tix3_in$x, y1=tix3_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix4_out$x, y0=tix4_out$y, x1=tix4_in$x, y1=tix4_in$y,
length=0, lwd=2.5, col="gray55")
# add major ticks
arrows(x0=major_ticks_out$x, y0=major_ticks_out$y,
x1=major_ticks_in$x, y1=major_ticks_in$y, length=0, lwd=4)
# add value
text(0, -0.65, value, cex=4)
# add label of variable
text(0, 0.43, label, cex=3.8)
# add needle
arrows(0, 0, val_x, val_y, col="#f38171", lwd=7)
# add central blue point
points(0, 0, col="#2e9ef3", pch=19, cex=5)
# add values 0 and 100
text(z0x, z0y, labels="0", col="gray50")
text(z100x, z100y, labels="100", col="gray50")
# external circle (this will be used for the black border)
border_cir = circle(c(0,0), radius=1, npoints = 100)
# gray border circle
external_cir = circle(c(0,0), radius=0.97, npoints = 100)
# yellow slice (this will be used for the yellow band)
yellowFrom = 75
yellowTo = 90
yel_ini = (yellowFrom/100) * (12/8)
yel_fin = (yellowTo/100) * (12/8)
Syel = slice2xy(seq.int(yel_ini, yel_fin, length.out = 30), rad=0.9)
# red slice (this will be used for the red band)
redFrom = 0
redTo = 75
red_ini = (redFrom/100) * (12/8)
red_fin = (redTo/100) * (12/8)
Sred = slice2xy(seq.int(red_ini, red_fin, length.out = 30), rad=0.9)
# white slice (this will be used to get the yellow and red bands)
whiteFrom = 74
whiteTo = 101
white_ini = (whiteFrom/100) * (12/8)
white_fin = (whiteTo/100) * (12/8)
Swhi = slice2xy(seq.int(white_ini, white_fin, length.out = 30), rad=0.8)
# coordinates of major ticks (will be plotted as arrows)
major_ticks_out = ticks(c(0,0), from=5*pi/4, to=-pi/4, radius=0.9, 5)
major_ticks_in = ticks(c(0,0), from=5*pi/4, to=-pi/4, radius=0.75, 5)
# coordinates of minor ticks (will be plotted as arrows)
tix1_out = ticks(c(0,0), from=5*pi/4, to=5*pi/4-3*pi/8, radius=0.9, 6)
tix2_out = ticks(c(0,0), from=7*pi/8, to=7*pi/8-3*pi/8, radius=0.9, 6)
tix3_out = ticks(c(0,0), from=4*pi/8, to=4*pi/8-3*pi/8, radius=0.9, 6)
tix4_out = ticks(c(0,0), from=pi/8, to=pi/8-3*pi/8, radius=0.9, 6)
tix1_in = ticks(c(0,0), from=5*pi/4, to=5*pi/4-3*pi/8, radius=0.85, 6)
tix2_in = ticks(c(0,0), from=7*pi/8, to=7*pi/8-3*pi/8, radius=0.85, 6)
tix3_in = ticks(c(0,0), from=4*pi/8, to=4*pi/8-3*pi/8, radius=0.85, 6)
tix4_in = ticks(c(0,0), from=pi/8, to=pi/8-3*pi/8, radius=0.85, 6)
# coordinates of min and max values (0, 100)
v0 = -1 * 0 * pi + 10*pi/8
z0x = 0.65 * cos(v0)
z0y = 0.65 * sin(v0)
v100 = -1 * 12/8 * pi + 10*pi/8
z100x = 0.65 * cos(v100)
z100y = 0.65 * sin(v100)
# indicated value, say 80 (you can choose another number between 0-100)
value = 80
# angle of needle pointing to the specified value
val = (value/100) * (12/8)
v = -1 * val * pi + 10*pi/8
# x-y coordinates of needle
val_x = 0.7 * cos(v)
val_y = 0.7 * sin(v)
# label to be displayed
label = "UseR!"
# open plot
plot(border_cir$x, border_cir$y, type="n", asp=1, axes=FALSE,
xlim=c(-1.05,1.05), ylim=c(-1.05,1.05),
xlab="", ylab="")
# yellow slice
polygon(c(Syel$x, 0), c(Syel$y, 0),
border = "#FF9900", col = "#FF9900", lty = NULL)
# red slice
polygon(c(Sred$x, 0), c(Sred$y, 0),
border = "#DC3912", col = "#DC3912", lty = NULL)
# white slice
polygon(c(Swhi$x, 0), c(Swhi$y, 0),
border = "white", col = "white", lty = NULL)
# add gray border
lines(external_cir$x, external_cir$y, col="gray85", lwd=20)
# add external border
lines(border_cir$x, border_cir$y, col="gray20", lwd=2)
# add minor ticks
arrows(x0=tix1_out$x, y0=tix1_out$y, x1=tix1_in$x, y1=tix1_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix2_out$x, y0=tix2_out$y, x1=tix2_in$x, y1=tix2_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix3_out$x, y0=tix3_out$y, x1=tix3_in$x, y1=tix3_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix4_out$x, y0=tix4_out$y, x1=tix4_in$x, y1=tix4_in$y,
length=0, lwd=2.5, col="gray55")
# add major ticks
arrows(x0=major_ticks_out$x, y0=major_ticks_out$y,
x1=major_ticks_in$x, y1=major_ticks_in$y, length=0, lwd=4)
# add value
text(0, -0.65, value, cex=4)
# add label of variable
text(0, 0.43, label, cex=3.8)
# add needle
arrows(0, 0, val_x, val_y, col="#f38171", lwd=7)
# add central blue point
points(0, 0, col="#2e9ef3", pch=19, cex=5)
# add values 0 and 100
text(z0x, z0y, labels="0", col="gray50")
text(z100x, z100y, labels="100", col="gray50")
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
#reading in CRU files into R
library(raster)
#for the CRU TS 1.2 download the .zip at http://ift.tt/1jvODdD
#the raster we get at the end, the data are monthly for all the years between 1901 and 2000
temp<-brick(nrows=228,ncols=258,xmn=-11,xmx=32,ymn=34,ymx=72,nl=1200,crs=CRS("+proj=longlat +datum=WGS84"))
#example using the temperature
all_dat<-scan("/home/lionel/Documents/Master/CRU/obs.1901-2000.tmp",skip=5,what="list")
#now turn the data into a matrix format with every line corresponding to a raster cell and the first two columns the column and row number of the cell
xs<-all_dat[seq(2,37465029,1203)]
xs<-gsub(",","",xs)
xs<-as.numeric(xs)
ys<-as.numeric(all_dat[seq(3,37465029,1203)])
mat<-matrix(c(xs,ys),ncol=2,byrow=FALSE)
#now add the temperature data from these cells for all month all year
numb<-matrix(4:1203,ncol=1)
numb<-apply(numb,1,function(x) seq(x[1],37465029,1203))
mat<-cbind(mat,apply(numb,2,function(x) as.numeric(all_dat[x])))
#reverse the rows number since they are numbered from bottom to top in CRU and from top to bottom in rasters
ys_inv<-ys-((ys-113.5)-1)*2
mat[,2]<-ys_inv
#get the cell numbers of each box defined in the CRU dataset
ce<-cellFromRowCol(temp,rownr=mat[,2],colnr=mat[,1])
#attribute to these cells the temperature values
values(temp)[ce,]<-mat[,3:1202]
#divide by 10 to get the temperature in degree celsius
values(temp)<-values(temp)/10
#put names to the layers
month<-c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Okt","Nov","Dec")
years<-1901:2000
names(temp)<-paste(rep(month,times=100),rep(years,each=12),sep="_")
#the winter mean temperature between 1914 and 1918
winter_1418<-calc(temp[[which(names(temp)%in%paste(rep(c("Dec","Jan","Feb"),times=5),rep(1914:1918,each=3),sep="_"))]],mean)
plot(winter_1418)
View(numb)
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
devtools::install_github("klutometis/roxygen")
ls
wd
getwd
setwd("~/GIT Repos/RepData_PeerAssessment1")
setwd("~/GIT Repos/RepData_PeerAssessment1")
unzip("~/activity.zip")
unzip("~/activity.zip", exdir=".")
unzip("~/activity.csv", exdir=".")
